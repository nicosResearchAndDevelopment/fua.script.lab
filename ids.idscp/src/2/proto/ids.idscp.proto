syntax = "proto3";

// REM : this protobuf shows some experimental extension.
// ######################################################
//       DON'T USE IT FOR PRODUCTION!!!!!!!!!!!!!!!!!!!!!
// ######################################################


//IDSCP message frame

message IdscpMessage {
    // One of the following will be filled in.
    oneof message {

        //region core
        IdscpHello idscpHello = 1;
        IdscpClose idscpClose = 2;
        IdscpDatExpired idscpDatExpired = 3;
        IdscpDat idscpDat = 4;
        IdscpReRa idscpReRa = 5;
        IdscpRaProver idscpRaProver = 6;
        IdscpRaVerifier idscpRaVerifier = 7;
        IdscpData idscpData = 8;
        IdscpAck idscpAck = 9;
        //endregion core

        //region application-layer

        //region application-layer :: idscp

        IdscpGenericMessage idscpGenericMessage = 1000;
        IdscpAppWelcome idscpAppWelcome = 1001;
        IdscpAppGoodbye idscpAppGoodbye = 1002;

        //endregion application-layer :: idscp

        //region application-layer :: custom-layer

        //region application-layer :: custom-layer :: fua-extension
        FuaMessage fuaMessage = 100001;
        //endregion application-layer :: custom-layer :: fua-extension

        //endregion application-layer :: custom-layer

        //endregion application-layer :: application-layer

    } // oneof message

} // message IdscpMessage


//IDSCP messages
message IdscpHello {
    int32 version = 1;
    IdscpDat dynamicAttributeToken = 2;     //initial dynamicAttributeToken
    repeated string supportedRaSuite = 3;  //RemoteAttestationCipher prover
    repeated string expectedRaSuite = 4;   //RemoteAttestationCipher verifier
}

message IdscpClose {

    enum CloseCause {
        USER_SHUTDOWN = 0;
        TIMEOUT = 1;
        ERROR = 2;
        NO_VALID_DAT = 3;
        NO_RA_MECHANISM_MATCH_PROVER = 4;
        NO_RA_MECHANISM_MATCH_VERIFIER = 5;
        RA_PROVER_FAILED = 6;
        RA_VERIFIER_FAILED = 7;
    }

    CloseCause cause_code = 1;
    string cause_msg = 2;
}

message IdscpDatExpired {}

message IdscpDat {
    bytes token = 1;
}

message IdscpReRa {
    string cause = 1;
}

message IdscpRaProver {
    bytes data = 1;
}

message IdscpRaVerifier {
    bytes data = 1;
}

message IdscpData {
    bytes data = 1;
    bool alternating_bit = 2;
}

message IdscpAck {
    bool alternating_bit = 1;
}

// #################################################################
// #################################################################
// #################################################################

//region idscp application-layer

//region idscp application-layer :: idscp
// REM : message id-range (1000..99999)
// REM : idscp application-layer sends those messages, transporting "main" payload, the subjects-of-interest
//       of given application

message IdscpHeader {
    string name = 1;
    string value = 2;
}

message IdscpGenericMessage {
    // REM : message id 1000
    repeated IdscpHeader header = 1;
    bytes payload = 2;
}

//region idscp application-layer :: idscp :: Welcome and Goodbye

// REM : "welcome" can be triggered at any time (maybe to update some information/configuration, etc.)
//       given application

message IdscpAppWelcome {
    // REM : message id 1001
    repeated IdscpHeader header = 1;
    bytes payload = 2;
} // message IdscpAppWelcome

message IdscpAppGoodbye {
    // REM : message id 1002
    repeated IdscpHeader header = 1;
    bytes payload = 2;
} // message IdscpAppGoodbye

//endregion idscp application-layer :: idscp :: Welcome and Goodbye

//endregion idscp application-layer :: idscp

// #################################################################
// #################################################################
// #################################################################

// REM : message id-range > 100001

//region application-layer :: custom-layer

// REM : there is only ONE restriction for a user (customer): used message-ids >= 100000

//region application-layer :: custom-layer :: fua-extension (Framework Universe Architecture)

// REM : following protobuf-messages and gRPC-services are for developing and testing purposes only!

// REM : NOT used so far
message FuaError {
    string id = 1;
    string type = 2;
    string code = 3;
    string message = 4;
}

message FuaHeader {
    string name = 1;
    string value = 2;
}

message FuaMessage {
    // // REM : message id 100001
    repeated FuaHeader header = 1;
    bytes payload = 2;
}

message FuaHeartbeat {
    string id = 1;
    string timestamp = 2;
}

message noParameter {}

service heartbeat {
    rpc get(noParameter) returns (FuaHeartbeat) {};
}

message RandomRange {
    float lower = 1;
    float upper = 2;
}

message Random {
    string timestamp = 1;
    float value = 2;
}

service random {
    // REM : what it does:
    //       puts in a random-range and gets a stream back: random numbers in this range
    rpc stream(RandomRange) returns (stream Random);
}

message Values {
    string id = 1; // REM : we have to put it in here, because we want to find the result, again.
    string sid = 2; // REM : we have to put it in here, because it is a stream
    float left = 3;
    float right = 4;
}

message Result {
    string type = 1;
    string value = 2;
}

service calculate {
    // REM : what it does:
   //       puts in a value-stream and gets back a stream of results, simply adding
    //      Values.left + Values.right
    rpc add(stream Values) returns (stream MetaValue);
}

message MetaValue {
    string id = 1;
    string prov = 2;
    string timestamp = 3;
    Value value = 4;
}

message Value {
    string type = 1;
    string value = 2;
}

//region time

// seeAlso: <https://github.com/nicosResearchAndDevelopment/nrd-motic/blob/master/decide/operator/time.md>

enum TimeConstraintOperator {
    BEFORE = 0;
} // enum Operator

message TimeConstraint {
    Value leftOperand = 1;
    TimeConstraintOperator operator = 2;
    Value rightOperand = 3;
} // message TimeConstraint

service time {
    rpc constraint(TimeConstraint) returns (Value) {};
}

//endregion time

//region application-layer :: custom-layer :: fua-extension (Framework Universe Architecture)

//region application-layer :: custom-layer

//endregion idscp application-layer
