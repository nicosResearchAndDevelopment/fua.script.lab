syntax = "proto3";

//IDSCP message frame

message IdscpMessage {
    // One of the following will be filled in.
    oneof message {

        //region core
        IdscpHello idscpHello = 1;
        IdscpClose idscpClose = 2;
        IdscpDatExpired idscpDatExpired = 3;
        IdscpDat idscpDat = 4;
        IdscpReRa idscpReRa = 5;
        IdscpRaProver idscpRaProver = 6;
        IdscpRaVerifier idscpRaVerifier = 7;
        IdscpData idscpData = 8;
        IdscpAck idscpAck = 9;
        //endregion core

        //region application-layer

        //region application-layer :: idscp

        IdscpGenericMessage idscpGenericMessage = 1000;
        IdscpAppWelcome idscpAppWelcome = 1001;
        IdscpAppGoodbye idscpAppGoodbye = 1002;

        //endregion application-layer :: idscp

        //region application-layer :: custom-layer

        //region application-layer :: custom-layer :: fua-extension
        FuaMessage fuaMessage = 100001;
        //endregion application-layer :: custom-layer :: fua-extension

        //endregion application-layer :: custom-layer

        //endregion application-layer :: application-layer

    } // oneof message

} // message IdscpMessage


//IDSCP messages
message IdscpHello {
    int32 version = 1;
    //IDSCP protocol version
    IdscpDat dynamicAttributeToken = 2;     //initial dynamicAttributeToken
    repeated string supportedRaSuite = 3;  //RemoteAttestationCipher prover
    repeated string expectedRaSuite = 4;   //RemoteAttestationCipher verifier
   //region fua-extension
    string sid = 5;
    //endregion fua-extension
}

message IdscpClose {

    enum CloseCause {
        USER_SHUTDOWN = 0;
        TIMEOUT = 1;
        ERROR = 2;
        NO_VALID_DAT = 3;
        NO_RA_MECHANISM_MATCH_PROVER = 4;
        NO_RA_MECHANISM_MATCH_VERIFIER = 5;
        RA_PROVER_FAILED = 6;
        RA_VERIFIER_FAILED = 7;
    }

    CloseCause cause_code = 1;
    string cause_msg = 2;
}

message IdscpDatExpired {}

message IdscpDat {
    bytes token = 1;
}

message IdscpReRa {
    string cause = 1;
}

message IdscpRaProver {
    bytes data = 1;
}

message IdscpRaVerifier {
    bytes data = 1;
}

message IdscpData {
    bytes data = 1;
    bool alternating_bit = 2;
}

message IdscpAck {
    bool alternating_bit = 1;
}

//region idscp application-layer

//region idscp application-layer :: idscp
// REM : message id-range (1000..99999)

// REM : idscp application-layer sends those messages, transporting "main" payload, the subjects-of-interest
//       of given application

message IdscpHeader {
    string name = 1;
    string value = 2;
}

message IdscpGenericMessage {
    // REM : message id 1000
    repeated IdscpHeader header = 1;
    bytes payload = 2;
}

//region idscp application-layer :: idscp :: welcome

// REM : "welcome" can be triggered at any time (maybe to update some information/configuration, etc.)
//       given application

message IdscpAppWelcome {
    // REM : message id 1001
    repeated IdscpHeader header = 1;
    bytes payload = 2;
    // REM : EXPERIMENTAL >>>>>>>>>>
    IdscpUpgrade upgrade = 3; // REM : this can be also transferred to payload...
    // REM : EXPERIMENTAL <<<<<<<<<<
} // message IdscpWelcome

message IdscpAppGoodbye {
    // REM : message id 1002
    repeated IdscpHeader header = 1;
    bytes payload = 2;
    // REM : EXPERIMENTAL >>>>>>>>>>
    IdscpUpgrade upgrade = 3; // REM : this can be also transferred to payload...
    // REM : EXPERIMENTAL <<<<<<<<<<
} // message IdscpWelcome

// REM : EXPERIMENTAL >>>>>>>>>>
message IdscpApplicationFunction {
    string name = 1;
}
message IdscpApplication {
    string applicationType = 1;
    string version = 2;
    repeated IdscpApplicationFunction function = 3;
}
message IdscpUpgrade {
    repeated IdscpApplication application = 1;
}
// REM : EXPERIMENTAL <<<<<<<<<<

//endregion idscp application-layer :: idscp :: Welcome

//endregion idscp application-layer :: idscp

//region application-layer :: custom-layer

// REM : there is only ONE restriction for a user (customer): used message-ids >= 100000

//region application-layer :: custom-layer :: fua-extension (Framework Universe Architecture)

// REM : NOT used so far
message FuaError {
    string id = 1;
    string type = 2;
    string code = 3;
    string message = 4;
}

message FuaHeader {
    string name = 1;
    string value = 2;
}

message FuaMessage {
    // // REM : message id 100001
    repeated FuaHeader header = 1;
    bytes payload = 2;
}

message FuaHeartbeat {
    string id = 1;
    string timestamp = 2;
}

message noParameter {}

service heartbeat {
    rpc get(noParameter) returns (FuaHeartbeat) {};
}

message RandomRange {
    float lower = 1;
    float upper = 2;
}

message Random {
    string timestamp = 1;
    float value = 2;
}

service random {
    rpc stream(RandomRange) returns (stream Random);
}

message Values {
    float left = 1;
    float right = 2;
}

message Result {
    string type = 1;
    string value = 2;
}

service calculate {
    rpc add(stream Values) returns (stream Result);
}

//region application-layer :: custom-layer :: fua-extension (Framework Universe Architecture)

//region application-layer :: custom-layer

//endregion idscp application-layer

//endregion fua